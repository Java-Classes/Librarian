//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.exlibris.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.exlibris";
option java_package = "javaclasses.exlibris.c";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "javaclasses/exlibris/identifiers.proto";
import "javaclasses/exlibris/values.proto";

// An attempt to create a new book.
//
// In case of a successful command propagation, the book is added.
// Cannot be applied to the existing book.
//
message AddBook {

    // The identifier of a book to create.
    BookId book_id = 1;

    // Who adds.
    UserId librarian_id = 2;

    // Details of the new book.
    BookDetails book_details = 3;
}

// An attempt to update a book.
//
// In case of a successful command propagation, the book is updated.
// Cannot be applied to the missing book.
//
message UpdateBook {

    // The identifier of a book to update.
    BookId book_id = 1;

    // Who updates.
    UserId librarian_id = 2;

    // New details for the existed book.
    BookDetails book_details = 3;
}

// An attempt to remove a book.
//
// In case of a successful command propagation, the book is removed.
// Cannot be applied to the missing book.
//
message RemoveBook {

    // The identifier of a book to remove.
    BookId book_id = 1;

    // Who removes.
    UserId librarian_id = 2;

    // The reason of removing book.
    //
    // A book could be removed with one of following reasons:
    // 1. Book was outdated.
    // 2. Custom reason that is described by librarian.
    oneof book_removal_reason {
        bool outdated = 3;
        string custom_reason = 4;
    }

    // The time when a book was removed.
    google.protobuf.Timestamp when_removed = 5;
}

// Append a book inventory.
//
// An appended book becomes available or ready to pickup for the user who borrowed it.
// `@see events.proto.InventoryAppended`
//
message AppendInventory {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;

    // The identifier of an added item.
    InventoryItemId inventory_item_id = 2;

    // Optional field: exists when book has a RFID mark.
    Rfid rfid = 3;

    // Who tries to append.
    UserId librarian_id = 4;
}

// An attempt to borrow a book.
//
// In case of a successful command propagation, a book is borrowed by a user.
// If the book was reserved, then the reservation became a loan.
//
// Cannot be applied to the book that is reserved by another user.
//
message BorrowBook {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;

    // The item that is planned to borrow.
    InventoryItemId intentory_item_id = 2;

    // Who borrows the book.
    UserId user_id = 3;
}

// An attempt to reserve a book.
//
// In case of a successful command propagation, the book will be reserved.
// Will be rejected if the book has already borrowed or reserved by the current user.
//
message ReserveBook {

    // The book that is planned to reserve.
    InventoryId intentory_id = 1;

    // Who reserves the book.
    UserId user_id = 2;
}

// An attempt to cancel the reservation.
//
// In case of a successful command propagation, the reservation is canceled.
// Cannot be applied to the missing reservation.
//
message CancelReservation {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;

    // Who cancels the book reservation.
    UserId user_id = 2;
}

// An attempt to extend a loan period.
//
// In case of a successful command propagation, the loan period is extended.
// Will be rejected if the book has been reserved by another user.
//
message ExtendLoanPeriod {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;
    // The loan that is planned to extend.
    LoanId loan_id = 2;

    // Who extends the loan.
    UserId user_id = 3;

    // New due date of the loan.
    google.protobuf.Timestamp new_due_date = 4;
}

//  Marks the loan period as overdue if the user hasn't return a book in time.
//
message MarkLoanOverdue {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;

    // The loan that is overdue.
    LoanId loan_id = 2;
}

// Mark the reservation as expired.
//
message MarkReservationExpired {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;

    // Whose book reservation expires.
    UserId user_id = 2;
}

// An attempt to return a book.
//
// In case of a successful command propagation, the book is returned.
// Cannot be applied to missing or non-borrowed books.
//
// `@see events.proto.BookReturned`
//
message ReturnBook {

    // The book that is planned to returne.
    InventoryId intentory_id = 1;

    // The item of the book that is planned to return.
    InventoryItemId inventory_item_id = 2;

    // Who returns the book.
    UserId user_id = 3;
}

// An attempt to report a lost book.
//
// In case of a successful command propagation, the book is reported as lost.
//
message ReportLostBook {

    // The identifier of an inventory.
    InventoryId intentory_id = 1;

    // The identifier of a lost book.
    InventoryItemId inventory_item_id = 2;

    // Who has lost the book.
    UserId who_lost = 3;
}

// An attempt to write a book off.
//
// In case of a successful command propagation, the book will be written off.
// Cannot be applied to the missing book.
//
message WriteBookOff {

    // The identifier of an inventory..
    InventoryId inventory_id = 1;

    // The book that is planned to write off.
    InventoryItemId inventory_item_id = 2;

    // The reason to write a book off.
    WriteOffReason write_book_off_reason = 3;

    // Who tries to write a book off.
    UserId librarian_id = 4;
}
